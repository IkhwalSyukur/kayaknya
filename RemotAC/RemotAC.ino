#include <RTClib.h>
#include <Wire.h>
#include "FirebaseESP8266.h"
#include <ESP8266WiFi.h>
#include "DHT.h"
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

#define FIREBASE_HOST "https://macca-e63f8.firebaseio.com/"
#define FIREBASE_AUTH "q2lgOIiWb23Zq6cbUPGeYstomHffqdOCPS4NcyPA"
//#define WIFI_SSID "BVXj-U3lpZmE"
//#define WIFI_PASSWORD "jalanjalan"
//#define WIFI_SSID "Variasi Aluminium"
//#define WIFI_PASSWORD "hapisahsyukur"
//#define WIFI_SSID "iPhone Fadhila"
//#define WIFI_PASSWORD "tanyakemamaku"
//#define WIFI_SSID "Redmi"
//#define WIFI_PASSWORD "123456789"
//#define WIFI_SSID "MALEO TECHNO CENTER"
//#define WIFI_PASSWORD "beliairdulu"
//#define WIFI_SSID "iPhone"
//#define WIFI_PASSWORD "1122334455 "
#define WIFI_SSID "Philano"
#define WIFI_PASSWORD "bosansaya"

RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = {"Ahad", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"};

String Serialnumb = "23102020001";

FirebaseData firebaseData;

const uint16_t kIrLed = 15;
IRsend irsend(kIrLed);

#define DHTPIN 12
#define DHTTYPE DHT22

int t;
int h;
int a = 0;
int b = 0;
int setsuhu;
int p_setsuhu = 0;
int p_hour;
int jeda = 1000;

boolean AC = false;
int AC_temp;
int stepAC = 0;
long error;
long p_error;
const int indi = 13;

int interval = 60;
int bright = 40;

DHT dht(DHTPIN, DHTTYPE);

//Sharp
uint16_t Sharpon[211] = {3802, 1926,  500, 464,  466, 1410,  444, 478,  480, 1392,  466, 492,  464, 1432,  430, 530,  428, 1426,  432, 504,  412, 1424,  468, 504,  416, 1418,  442, 1414,  444, 516,  438, 1414,  446, 524,  432, 1414,  444, 1414,  444, 1414,  444, 1416,  444, 512,  444, 512,  442, 1414,  444, 1416,  444, 512,  444, 510,  444, 512,  444, 512,  446, 1414,  444, 512,  444, 512,  444, 512,  444, 1414,  444, 1414,  446, 510,  444, 510,  444, 512,  444, 512,  444, 1416,  444, 1414,  446, 1414,  444, 510,  444, 512,  444, 510,  444, 1414,  446, 510,  446, 510,  444, 512,  444, 510,  446, 1414,  444, 512,  444, 510,  446, 1414,  446, 1414,  446, 1412,  446, 512,  444, 510,  444, 510,  446, 510,  446, 512,  444, 510,  446, 510,  444, 510,  446, 510,  444, 512,  444, 512,  444, 512,  444, 1414,  446, 510,  446, 510,  446, 512,  444, 510,  444, 512,  444, 510,  444, 512,  444, 512,  444, 510,  446, 510,  444, 510,  446, 1412,  446, 512,  444, 512,  444, 510,  444, 510,  446, 510,  444, 512,  444, 510,  444, 512,  444, 510,  446, 510,  444, 512,  444, 510,  446, 1412,  446, 1414,  446, 1414,  446, 1412,  446, 1414,  446, 510,  446, 510,  444, 512,  446, 1412,  446, 510,  446, 512,  444, 1414,  494};  // SHARP_AC
uint16_t Sharpoff[211] = {3792, 1926,  466, 478,  482, 1376,  482, 474,  480, 1378,  482, 476,  480, 1378,  486, 472,  484, 1374,  486, 470,  488, 1370,  486, 472,  484, 1374,  484, 1374,  486, 470,  484, 1372,  490, 468,  482, 1376,  486, 1374,  484, 1376,  484, 1374,  482, 472,  482, 474,  482, 1376,  486, 1374,  482, 474,  484, 476,  446, 506,  450, 506,  480, 1378,  482, 474,  482, 474,  484, 472,  448, 1408,  484, 1376,  450, 506,  448, 506,  450, 506,  448, 506,  450, 1408,  450, 1408,  484, 1376,  450, 506,  450, 506,  450, 506,  448, 506,  450, 1410,  450, 506,  448, 508,  448, 506,  450, 1410,  450, 506,  450, 506,  448, 1408,  484, 1376,  450, 1408,  484, 474,  450, 506,  448, 506,  450, 506,  448, 506,  450, 506,  450, 506,  482, 474,  448, 508,  480, 474,  450, 506,  450, 506,  448, 1410,  450, 506,  450, 506,  448, 506,  450, 506,  450, 506,  448, 506,  450, 506,  450, 506,  450, 506,  450, 506,  450, 506,  448, 1408,  484, 474,  450, 506,  450, 506,  448, 506,  450, 504,  450, 508,  448, 506,  450, 508,  448, 506,  450, 506,  450, 506,  450, 506,  448, 1408,  452, 1408,  450, 1408,  450, 1408,  452, 1408,  452, 506,  448, 506,  450, 506,  448, 506,  448, 1410,  450, 506,  450, 1408,  484};  // SHARP_AC
uint16_t Sharp30[211] = {3796, 1916,  478, 480,  476, 1382,  478, 480,  476, 1382,  478, 478,  478, 1380,  476, 480,  476, 1380,  478, 480,  476, 1382,  478, 480,  476, 1382,  476, 1382,  478, 480,  476, 1384,  476, 480,  476, 1382,  478, 1380,  478, 1382,  476, 1382,  476, 480,  476, 480,  476, 1382,  478, 1382,  478, 480,  476, 480,  476, 480,  476, 480,  476, 1382,  478, 480,  476, 480,  476, 478,  476, 1382,  476, 1380,  480, 1382,  478, 1382,  476, 480,  476, 478,  476, 1382,  476, 1382,  478, 1380,  478, 478,  476, 478,  476, 480,  476, 1380,  478, 1384,  476, 478,  476, 480,  478, 478,  476, 1382,  482, 476,  476, 480,  476, 1382,  476, 1382,  476, 1382,  478, 480,  476, 478,  476, 480,  476, 480,  478, 480,  476, 480,  476, 480,  476, 480,  476, 478,  478, 478,  476, 478,  476, 478,  478, 1380,  480, 478,  476, 480,  476, 480,  478, 478,  476, 480,  476, 478,  476, 480,  476, 480,  476, 478,  478, 480,  476, 480,  476, 1382,  478, 480,  476, 478,  476, 1382,  478, 480,  476, 480,  476, 478,  476, 478,  476, 480,  476, 478,  476, 480,  476, 480,  476, 480,  476, 1382,  478, 1380,  478, 1382,  478, 1382,  478, 1382,  476, 480,  476, 480,  474, 480,  478, 1382,  478, 1380,  478, 480,  476, 478,  492};  // SHARP_AC
uint16_t Sharp29[211] = {3828, 1886,  480, 478,  476, 1382,  476, 480,  476, 1382,  478, 478,  476, 1382,  478, 478,  476, 1382,  478, 478,  478, 1380,  478, 478,  476, 1382,  478, 1382,  478, 480,  476, 1382,  476, 480,  478, 1380,  478, 1382,  476, 1382,  476, 1382,  476, 480,  476, 478,  476, 1382,  478, 1382,  476, 480,  476, 480,  476, 478,  476, 478,  478, 1380,  478, 480,  478, 478,  476, 480,  476, 480,  476, 1382,  478, 1380,  478, 1384,  476, 478,  476, 480,  478, 1380,  478, 1382,  478, 1380,  480, 478,  476, 480,  476, 480,  476, 1380,  480, 1380,  478, 478,  478, 480,  476, 480,  476, 1382,  476, 480,  476, 480,  476, 1382,  476, 1382,  478, 1382,  478, 478,  476, 480,  476, 478,  476, 480,  476, 480,  476, 478,  478, 478,  478, 478,  476, 478,  478, 478,  476, 480,  476, 480,  476, 1380,  478, 480,  476, 478,  476, 480,  476, 480,  476, 480,  476, 480,  476, 480,  476, 480,  476, 478,  478, 480,  476, 480,  476, 1382,  478, 478,  476, 480,  476, 1382,  478, 478,  478, 480,  476, 478,  476, 480,  476, 480,  476, 480,  476, 478,  476, 480,  476, 478,  476, 1382,  478, 1380,  478, 1382,  478, 1382,  476, 1382,  478, 480,  476, 480,  476, 480,  476, 480,  476, 1382,  476, 480,  476, 480,  492};  // SHARP_AC
uint16_t Sharp28[211] = {3768, 1946,  450, 478,  476, 1382,  478, 478,  476, 1380,  478, 478,  476, 1382,  476, 480,  476, 1382,  478, 480,  476, 1380,  478, 478,  476, 1380,  480, 1382,  476, 478,  478, 1380,  478, 480,  478, 1380,  478, 1380,  478, 1382,  478, 1380,  478, 478,  478, 480,  476, 1382,  478, 1380,  478, 480,  476, 478,  476, 480,  476, 480,  476, 1382,  478, 478,  476, 480,  476, 480,  476, 1380,  478, 478,  478, 1382,  476, 1382,  478, 480,  476, 480,  476, 1384,  476, 1382,  476, 1382,  476, 480,  476, 480,  476, 480,  476, 1382,  478, 1380,  478, 480,  476, 478,  478, 478,  478, 1382,  478, 478,  478, 478,  476, 1382,  478, 1382,  478, 1380,  478, 478,  476, 480,  478, 478,  476, 480,  476, 480,  476, 480,  476, 480,  476, 480,  476, 480,  476, 480,  476, 478,  476, 480,  476, 1382,  478, 480,  476, 478,  476, 480,  476, 480,  476, 478,  478, 480,  476, 480,  476, 478,  478, 478,  476, 478,  478, 480,  476, 1382,  478, 478,  478, 478,  476, 1382,  478, 478,  476, 478,  478, 478,  476, 480,  476, 478,  476, 480,  476, 480,  476, 480,  476, 480,  476, 1382,  478, 1382,  478, 1380,  478, 1382,  478, 1382,  476, 480,  476, 480,  476, 480,  476, 1380,  478, 478,  476, 480,  476, 480,  492};  // SHARP_AC
uint16_t Sharp27[211] = {3856, 1856,  508, 476,  480, 1354,  506, 476,  480, 1352,  506, 476,  480, 1352,  506, 476,  480, 1352,  506, 476,  480, 1350,  508, 476,  480, 1352,  506, 1352,  508, 476,  480, 1352,  508, 476,  480, 1352,  506, 1352,  508, 1352,  506, 1352,  506, 476,  480, 474,  482, 1352,  508, 1352,  508, 476,  480, 476,  480, 476,  480, 476,  480, 1352,  508, 474,  482, 476,  478, 476,  480, 476,  480, 474,  480, 1350,  508, 1352,  508, 474,  480, 476,  480, 1352,  508, 1354,  504, 1354,  506, 476,  480, 476,  480, 478,  478, 1352,  508, 1352,  506, 476,  480, 476,  480, 476,  480, 1352,  506, 476,  480, 476,  478, 1352,  506, 1354,  504, 1378,  482, 474,  480, 476,  478, 478,  478, 476,  480, 476,  480, 476,  480, 476,  478, 476,  480, 476,  478, 476,  480, 478,  478, 476,  478, 1354,  506, 476,  480, 476,  478, 476,  480, 476,  478, 478,  478, 476,  480, 476,  478, 478,  478, 476,  480, 476,  478, 476,  480, 1352,  506, 478,  478, 476,  478, 1354,  506, 476,  478, 478,  478, 478,  478, 476,  478, 478,  478, 476,  478, 476,  480, 476,  478, 476,  478, 1354,  506, 1354,  504, 1354,  504, 1354,  506, 1354,  504, 478,  478, 478,  478, 478,  478, 478,  476, 478,  478, 478,  476, 480,  472};  // SHARP_AC
uint16_t Sharp26[211] = {3862, 1850,  514, 472,  484, 1346,  512, 472,  484, 1348,  512, 472,  484, 1346,  512, 472,  484, 1346,  512, 472,  484, 1348,  512, 472,  486, 1346,  512, 1348,  510, 472,  484, 1348,  512, 446,  508, 1348,  510, 1348,  510, 1374,  484, 1346,  512, 472,  484, 472,  484, 1346,  512, 1348,  512, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 1348,  512, 472,  484, 1346,  512, 472,  484, 472,  484, 1346,  512, 1346,  512, 1348,  512, 470,  486, 472,  484, 470,  484, 1348,  512, 1346,  514, 470,  486, 472,  484, 472,  484, 1346,  512, 472,  484, 472,  484, 1348,  512, 1348,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  514, 472,  484, 472,  484, 472,  484, 472,  484, 472,  486, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  512, 446,  510, 472,  484, 1346,  512, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 1348,  512, 1348,  512, 1346,  512, 1348,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 1348,  510, 1348,  512, 472,  464};  // SHARP_AC
uint16_t Sharp25[211] = {3862, 1852,  510, 446,  510, 1348,  510, 446,  510, 1348,  510, 446,  510, 1350,  510, 446,  510, 1348,  512, 446,  510, 1348,  512, 444,  510, 1348,  512, 1348,  512, 446,  510, 1348,  510, 446,  510, 1348,  510, 1348,  512, 1348,  512, 1346,  512, 446,  510, 446,  510, 1348,  512, 1348,  512, 444,  510, 446,  510, 446,  510, 446,  510, 1348,  512, 446,  510, 446,  510, 446,  510, 444,  510, 1348,  512, 446,  510, 1348,  510, 446,  510, 446,  510, 1348,  512, 1348,  510, 1348,  512, 444,  510, 446,  510, 446,  508, 1350,  510, 1348,  510, 446,  510, 446,  510, 446,  510, 1348,  510, 446,  508, 446,  510, 1348,  512, 1348,  512, 1348,  510, 446,  510, 446,  510, 446,  508, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 448,  508, 1348,  512, 444,  510, 444,  510, 446,  508, 446,  510, 446,  510, 446,  508, 446,  510, 446,  508, 446,  510, 446,  510, 446,  510, 1350,  510, 446,  510, 446,  508, 1348,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  508, 446,  510, 446,  510, 446,  510, 1348,  510, 1350,  510, 1348,  510, 1348,  512, 1348,  512, 444,  510, 446,  510, 446,  510, 446,  510, 1346,  514, 1346,  512, 444,  450};  // SHARP_AC
uint16_t Sharp24[211] = {3862, 1852,  512, 444,  512, 1348,  512, 444,  510, 1348,  512, 444,  510, 1350,  508, 446,  480, 1378,  480, 476,  478, 1380,  478, 478,  478, 1380,  508, 1352,  508, 450,  508, 1350,  510, 446,  510, 1348,  508, 1350,  508, 1352,  508, 1352,  506, 450,  504, 450,  480, 1378,  480, 1378,  480, 478,  480, 476,  478, 478,  476, 478,  476, 1382,  478, 478,  476, 480,  472, 484,  474, 1384,  472, 484,  446, 510,  444, 1414,  446, 512,  444, 510,  446, 1414,  446, 1412,  446, 1414,  446, 510,  472, 484,  446, 510,  444, 1412,  448, 1412,  474, 482,  444, 512,  444, 510,  444, 1416,  444, 510,  444, 510,  444, 1414,  446, 1412,  446, 1414,  446, 510,  444, 512,  444, 510,  446, 510,  444, 512,  442, 512,  444, 512,  444, 510,  446, 510,  444, 512,  444, 512,  444, 510,  444, 1414,  446, 510,  444, 512,  444, 512,  444, 512,  444, 512,  444, 512,  444, 512,  444, 512,  444, 512,  444, 512,  444, 510,  444, 1412,  446, 512,  444, 512,  444, 1414,  446, 512,  470, 484,  446, 510,  444, 512,  444, 512,  444, 510,  444, 512,  444, 510,  446, 512,  444, 1414,  444, 1414,  472, 1386,  446, 1414,  444, 1412,  446, 512,  444, 512,  444, 510,  444, 1414,  444, 512,  444, 1414,  446, 512,  480};  // SHARP_AC
uint16_t Sharp23[211] = {3862, 1852,  514, 472,  484, 1348,  510, 446,  510, 1346,  512, 472,  484, 1348,  512, 472,  486, 1346,  512, 472,  484, 1348,  512, 470,  484, 1348,  512, 1346,  512, 472,  484, 1348,  512, 470,  486, 1346,  512, 1350,  510, 1348,  512, 1346,  512, 472,  484, 472,  484, 1346,  512, 1348,  512, 472,  484, 472,  484, 470,  486, 472,  484, 1348,  512, 472,  484, 472,  484, 472,  484, 472,  482, 472,  484, 472,  484, 1348,  510, 472,  484, 472,  486, 1346,  510, 1348,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 1346,  512, 472,  486, 470,  484, 1346,  512, 1346,  512, 1348,  510, 472,  484, 472,  482, 472,  484, 472,  484, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  512, 472,  484, 472,  484, 474,  482, 474,  484, 472,  484, 472,  484, 472,  484, 470,  484, 472,  484, 472,  484, 472,  484, 1348,  510, 472,  484, 470,  484, 1346,  512, 472,  484, 474,  482, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  510, 1348,  510, 1348,  512, 1348,  510, 1348,  510, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 472,  472};  // SHARP_AC
uint16_t Sharp22[211] = {3862, 1850,  514, 444,  510, 1348,  512, 444,  510, 1346,  512, 444,  512, 1348,  510, 446,  510, 1348,  512, 444,  512, 1346,  514, 444,  512, 1346,  512, 1348,  512, 444,  510, 1348,  512, 444,  512, 1346,  512, 1346,  512, 1346,  512, 1346,  512, 444,  512, 446,  510, 1348,  512, 1346,  512, 444,  510, 446,  510, 446,  510, 446,  510, 1348,  512, 444,  510, 446,  510, 446,  510, 1348,  512, 1344,  514, 1348,  512, 446,  510, 444,  510, 446,  510, 1348,  512, 1348,  510, 1348,  512, 444,  510, 446,  510, 446,  510, 1348,  512, 1346,  512, 446,  510, 446,  510, 446,  510, 1348,  512, 446,  510, 446,  510, 1348,  512, 1346,  512, 1346,  512, 446,  508, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 444,  512, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 1348,  512, 444,  510, 446,  510, 444,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 1348,  512, 444,  512, 444,  510, 1348,  512, 444,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  510, 1346,  514, 1346,  512, 1346,  514, 1346,  512, 1348,  512, 446,  510, 444,  510, 446,  510, 1346,  512, 1348,  512, 446,  510, 1348,  452};  // SHARP_AC
uint16_t Sharp21[211] = {3802, 1884,  480, 504,  452, 1380,  478, 504,  452, 1380,  478, 504,  452, 1380,  504, 480,  452, 1382,  502, 480,  452, 1380,  502, 480,  452, 1380,  504, 1356,  502, 480,  472, 1360,  502, 480,  476, 1358,  502, 1356,  504, 1354,  504, 1356,  504, 478,  476, 478,  476, 1382,  476, 1354,  506, 478,  478, 478,  478, 478,  478, 478,  478, 1356,  504, 476,  478, 478,  478, 478,  478, 478,  478, 1354,  506, 1354,  506, 476,  478, 478,  478, 478,  478, 1354,  506, 1354,  504, 1354,  504, 478,  478, 478,  478, 478,  478, 1354,  506, 1352,  506, 478,  478, 478,  480, 476,  480, 1354,  504, 478,  478, 478,  478, 1354,  504, 1356,  502, 1356,  504, 478,  478, 478,  476, 478,  478, 476,  478, 478,  478, 478,  478, 476,  478, 478,  478, 478,  478, 478,  478, 478,  478, 478,  478, 1356,  504, 480,  476, 478,  476, 478,  478, 478,  478, 478,  478, 478,  476, 480,  476, 478,  478, 478,  476, 480,  476, 480,  476, 1356,  502, 480,  476, 478,  466, 1368,  502, 478,  454, 502,  452, 504,  452, 504,  452, 504,  452, 504,  452, 504,  452, 504,  452, 504,  452, 1382,  478, 1380,  478, 1380,  478, 1382,  478, 1380,  480, 480,  476, 480,  476, 504,  452, 480,  476, 1382,  478, 480,  476, 1380,  522};  // SHARP_AC
uint16_t Sharp20[211] = {3862, 1852,  512, 472,  484, 1346,  512, 472,  484, 1346,  512, 472,  484, 1346,  512, 446,  508, 1348,  512, 472,  484, 1346,  512, 472,  484, 1348,  512, 1348,  512, 446,  508, 1348,  512, 446,  510, 1346,  512, 1346,  512, 1348,  512, 1346,  512, 472,  484, 472,  484, 1346,  512, 1348,  512, 446,  510, 472,  484, 472,  484, 472,  484, 1348,  512, 472,  484, 472,  484, 472,  484, 1346,  512, 472,  484, 1346,  512, 446,  508, 472,  484, 472,  484, 1348,  512, 1346,  512, 1346,  512, 472,  486, 470,  484, 472,  484, 1346,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 1350,  510, 472,  484, 472,  484, 1348,  510, 1348,  510, 1348,  512, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 474,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  482, 472,  484, 1346,  512, 472,  484, 472,  484, 1348,  512, 470,  484, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  510, 1348,  510, 1348,  510, 1350,  510, 1348,  510, 472,  484, 472,  482, 472,  482, 1350,  510, 472,  484, 472,  484, 1350,  498};  // SHARP_AC
uint16_t Sharp19[211] = {3804, 1926,  470, 472,  482, 1376,  484, 472,  482, 1378,  484, 472,  484, 1374,  488, 470,  486, 1372,  486, 470,  486, 1370,  488, 468,  488, 1370,  488, 1370,  488, 470,  484, 1372,  490, 468,  486, 1370,  486, 1372,  490, 1370,  490, 1370,  486, 470,  486, 470,  484, 1374,  490, 1368,  488, 470,  484, 470,  452, 504,  452, 504,  484, 1376,  484, 470,  452, 504,  452, 504,  450, 504,  482, 474,  452, 1406,  484, 472,  452, 504,  452, 504,  452, 1406,  458, 1400,  454, 1406,  454, 502,  452, 504,  452, 504,  452, 1406,  452, 1406,  452, 504,  452, 504,  450, 504,  452, 1406,  454, 504,  452, 504,  452, 1406,  454, 1406,  454, 1406,  484, 472,  452, 502,  452, 504,  452, 504,  452, 504,  452, 504,  484, 472,  452, 504,  484, 472,  452, 504,  452, 504,  450, 504,  452, 1406,  486, 472,  450, 504,  484, 470,  484, 472,  452, 504,  450, 504,  484, 470,  452, 504,  452, 504,  486, 470,  484, 470,  484, 1374,  486, 470,  486, 470,  488, 1370,  486, 470,  484, 472,  486, 468,  486, 470,  486, 470,  488, 468,  486, 468,  486, 470,  486, 470,  486, 1372,  490, 1370,  488, 1370,  490, 1370,  490, 1368,  490, 468,  488, 468,  488, 468,  488, 468,  488, 468,  486, 468,  486, 1372,  458};  // SHARP_AC
uint16_t Sharp18[211] = {3862, 1848,  516, 470,  484, 1348,  512, 472,  484, 1348,  512, 470,  484, 1348,  512, 446,  508, 1348,  510, 472,  484, 1346,  512, 472,  484, 1348,  512, 1348,  512, 470,  484, 1348,  512, 470,  484, 1346,  512, 1348,  512, 1348,  512, 1346,  512, 446,  508, 472,  484, 1346,  512, 1346,  514, 472,  484, 472,  484, 472,  484, 472,  486, 1346,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 1348,  512, 470,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 1348,  510, 1348,  510, 472,  484, 470,  484, 472,  484, 1348,  512, 1348,  510, 472,  484, 472,  484, 472,  484, 1348,  512, 470,  484, 472,  484, 1348,  512, 1348,  512, 1346,  510, 472,  486, 470,  484, 472,  484, 472,  484, 472,  484, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  512, 472,  484, 472,  484, 472,  484, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  510, 472,  484, 472,  484, 1348,  512, 472,  484, 472,  482, 472,  484, 472,  482, 474,  482, 472,  484, 472,  482, 472,  484, 472,  484, 1348,  510, 1348,  510, 1348,  512, 1348,  510, 1348,  512, 472,  484, 472,  484, 472,  484, 1348,  510, 1350,  510, 1346,  512, 1348,  496};  // SHARP_AC
uint16_t Sharp17[211] = {3862, 1850,  512, 472,  484, 1348,  510, 472,  484, 1348,  512, 472,  484, 1348,  512, 472,  484, 1346,  512, 472,  484, 1348,  512, 472,  486, 1346,  512, 1348,  510, 472,  484, 1348,  512, 472,  484, 1348,  512, 1346,  512, 1346,  512, 1348,  512, 472,  484, 472,  484, 1346,  512, 1348,  510, 472,  488, 468,  484, 472,  484, 472,  484, 1348,  512, 470,  484, 472,  484, 472,  484, 472,  486, 1346,  512, 472,  484, 472,  484, 472,  482, 472,  484, 1346,  512, 1346,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 1346,  512, 472,  484, 472,  484, 472,  484, 1348,  512, 446,  510, 472,  484, 1348,  512, 1346,  512, 1346,  512, 446,  510, 470,  486, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1348,  512, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 470,  484, 472,  484, 472,  484, 1346,  512, 472,  484, 472,  484, 1348,  512, 446,  510, 472,  484, 470,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  512, 1346,  512, 1348,  512, 1346,  514, 1346,  512, 472,  484, 472,  484, 472,  484, 472,  484, 1346,  512, 1346,  512, 1346,  492};  // SHARP_AC
uint16_t Sharp16[211] = {3860, 1850,  514, 446,  510, 1346,  512, 446,  510, 1348,  512, 446,  510, 1348,  510, 446,  510, 1348,  512, 446,  510, 1348,  512, 446,  510, 1348,  512, 1346,  512, 446,  510, 1348,  512, 444,  510, 1348,  510, 1346,  512, 1348,  510, 1348,  512, 446,  508, 446,  510, 1348,  512, 1348,  512, 446,  510, 446,  510, 446,  510, 446,  508, 1348,  512, 444,  512, 446,  508, 446,  510, 1348,  510, 446,  510, 446,  510, 446,  510, 446,  510, 446,  508, 1348,  512, 1346,  512, 1346,  512, 446,  510, 446,  510, 446,  510, 1346,  512, 1348,  512, 446,  510, 446,  510, 444,  510, 1348,  510, 446,  510, 444,  510, 1348,  512, 1348,  510, 1348,  512, 446,  510, 446,  510, 446,  510, 446,  510, 446,  508, 446,  508, 446,  510, 446,  510, 446,  510, 446,  510, 446,  508, 448,  508, 1346,  512, 446,  510, 448,  508, 446,  508, 448,  508, 446,  510, 446,  510, 446,  508, 446,  510, 446,  510, 446,  510, 446,  508, 1348,  512, 446,  510, 448,  508, 1350,  510, 446,  510, 446,  510, 446,  508, 448,  508, 448,  508, 446,  508, 448,  510, 446,  510, 446,  510, 1348,  510, 1348,  510, 1348,  510, 1348,  512, 1348,  512, 448,  508, 454,  500, 472,  482, 1350,  510, 472,  484, 1348,  510, 1348,  452};  // SHARP_AC

//Panasonic
uint16_t Panasonicon[439] = {3464, 1804,  402, 440,  428, 1298,  430, 440,  426, 440,  396, 472,  394, 472,  398, 468,  396, 476,  398, 470,  406, 460,  428, 440,  396, 472,  396, 470,  396, 1330,  428, 440,  396, 478,  394, 470,  396, 470,  396, 470,  396, 472,  394, 472,  394, 1332,  396, 1330,  398, 1334,  396, 470,  396, 470,  396, 1330,  396, 472,  396, 470,  396, 470,  398, 470,  396, 476,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 476,  396, 472,  396, 470,  396, 472,  396, 470,  396, 470,  396, 470,  396, 472,  396, 476,  396, 470,  396, 470,  398, 470,  398, 470,  396, 470,  396, 470,  396, 470,  398, 474,  396, 470,  396, 1330,  398, 1330,  398, 470,  396, 470,  396, 470,  396, 470,  396, 472,  396, 10016,  3470, 1770,  398, 470,  396, 1330,  398, 470,  398, 470,  396, 470,  396, 470,  396, 470,  396, 476,  398, 468,  398, 470,  396, 472,  394, 470,  396, 470,  398, 1330,  398, 470,  398, 476,  396, 470,  398, 470,  396, 470,  396, 470,  396, 470,  396, 1330,  398, 1330,  398, 1334,  398, 470,  396, 470,  396, 1330,  398, 470,  396, 470,  398, 470,  398, 470,  396, 476,  396, 470,  396, 470,  398, 470,  398, 470,  396, 470,  396, 470,  396, 470,  398, 474,  396, 1330,  400, 468,  396, 470,  396, 470,  396, 1332,  396, 1330,  398, 470,  396, 476,  396, 470,  396, 470,  396, 470,  398, 470,  396, 470,  396, 1330,  398, 470,  396, 474,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 472,  394, 1350,  428, 1300,  428, 1300,  428, 1300,  398, 1330,  428, 440,  396, 1330,  428, 440,  396, 1336,  428, 440,  396, 470,  396, 470,  398, 470,  396, 470,  396, 470,  396, 470,  396, 476,  396, 470,  396, 470,  396, 472,  396, 470,  396, 470,  398, 470,  396, 470,  398, 474,  398, 470,  396, 1330,  398, 1330,  396, 470,  396, 470,  398, 468,  398, 470,  398, 476,  396, 470,  396, 470,  398, 470,  396, 470,  396, 470,  396, 1330,  398, 1330,  396, 476,  396, 470,  398, 470,  396, 470,  396, 470,  396, 472,  396, 470,  396, 470,  396, 474,  398, 470,  396, 472,  396, 470,  396, 470,  396, 470,  396, 470,  396, 470,  396, 476,  396, 470,  396, 470,  396, 468,  398, 470,  396, 470,  396, 470,  396, 472,  396, 1336,  398, 470,  398, 470,  396, 470,  396, 470,  396, 472,  396, 470,  396, 470,  396, 474,  398, 470,  396, 1330,  398, 1330,  396, 470,  396, 470,  396, 470,  398, 470,  398, 474,  396, 470,  396, 1330,  398, 470,  398, 470,  398, 1330,  398, 1330,  398, 1330,  396, 472,  396};  // PANASONIC_AC
uint16_t Panasonicoff[439] = {3464, 1776,  428, 440,  426, 1300,  428, 440,  426, 440,  426, 442,  426, 440,  426, 466,  402, 470,  402, 466,  400, 466,  402, 464,  402, 464,  404, 464,  402, 1300,  452, 440,  430, 442,  428, 440,  430, 438,  428, 438,  430, 436,  430, 436,  430, 1270,  458, 1268,  460, 1272,  460, 432,  434, 434,  434, 1268,  460, 432,  436, 432,  434, 432,  434, 432,  434, 438,  434, 432,  434, 432,  434, 432,  434, 432,  434, 434,  434, 432,  434, 432,  434, 438,  434, 432,  436, 432,  434, 432,  434, 434,  434, 432,  434, 432,  436, 432,  434, 438,  436, 430,  436, 430,  436, 432,  434, 432,  436, 432,  434, 432,  436, 432,  436, 436,  434, 432,  434, 1266,  462, 1264,  462, 432,  434, 432,  436, 432,  436, 432,  436, 434,  434, 9948,  3532, 1708,  466, 432,  434, 1266,  462, 430,  436, 432,  436, 432,  434, 432,  436, 432,  436, 436,  434, 434,  434, 432,  434, 432,  434, 432,  434, 432,  434, 1266,  462, 432,  434, 438,  434, 432,  436, 432,  436, 432,  436, 432,  434, 432,  436, 1266,  462, 1266,  460, 1272,  460, 432,  434, 432,  434, 1266,  460, 432,  434, 432,  436, 432,  434, 432,  434, 438,  434, 432,  434, 432,  434, 434,  432, 434,  434, 434,  434, 432,  434, 434,  432, 438,  434, 434,  434, 434,  432, 434,  434, 434,  434, 1268,  458, 1268,  458, 434,  432, 440,  432, 434,  432, 434,  432, 436,  432, 436,  430, 436,  430, 1270,  456, 436,  430, 442,  430, 438,  430, 436,  430, 436,  430, 436,  430, 438,  428, 438,  428, 438,  428, 1292,  454, 1274,  454, 1274,  428, 1298,  428, 1300,  428, 464,  402, 1298,  428, 440,  428, 1304,  428, 466,  400, 466,  400, 466,  402, 466,  402, 466,  402, 440,  426, 442,  426, 470,  402, 466,  400, 442,  426, 466,  402, 466,  402, 464,  402, 464,  402, 466,  400, 470,  402, 464,  402, 1324,  402, 1298,  428, 464,  402, 464,  402, 464,  402, 464,  402, 470,  404, 464,  428, 440,  428, 438,  428, 438,  428, 438,  430, 1272,  456, 1272,  456, 440,  432, 434,  432, 434,  432, 434,  434, 434,  434, 434,  434, 434,  434, 434,  432, 438,  434, 434,  434, 434,  434, 434,  434, 432,  434, 432,  434, 432,  436, 432,  434, 438,  434, 432,  434, 430,  436, 432,  436, 432,  434, 434,  434, 432,  436, 432,  434, 1272,  460, 432,  434, 432,  436, 432,  434, 432,  436, 430,  436, 432,  434, 432,  436, 436,  434, 432,  434, 1266,  462, 1266,  462, 432,  436, 432,  434, 432,  434, 432,  436, 438,  434, 1266,  464, 430,  436, 432,  436, 432,  434, 1266,  462, 1266,  462, 1266,  462, 434,  436};  // PANASONIC_AC

//kipasmiyako
uint16_t kipasoff[191] = {1292, 406,  1288, 406,  450, 1246,  1290, 406,  1288, 406,  450, 1244,  452, 1242,  476, 1216,  452, 1242,  476, 1216,  452, 1240,  1316, 7246,  1318, 378,  1316, 378,  450, 1244,  1318, 378,  1314, 380,  452, 1244,  480, 1216,  478, 1214,  476, 1218,  478, 1214,  480, 1214,  1316, 7244,  1318, 380,  1312, 380,  452, 1244,  1318, 378,  1288, 406,  476, 1220,  478, 1218,  478, 1216,  452, 1240,  452, 1240,  456, 1238,  1318, 7246,  1318, 378,  1316, 378,  478, 1218,  1318, 378,  1316, 378,  450, 1246,  478, 1214,  480, 1214,  478, 1214,  478, 1216,  480, 1212,  1320, 7242,  1324, 374,  1318, 376,  482, 1214,  1320, 374,  1322, 374,  482, 1214,  484, 1210,  484, 1210,  484, 1212,  482, 1210,  484, 1208,  1322, 7238,  1324, 372,  1322, 372,  484, 1212,  1324, 372,  1320, 372,  482, 1214,  486, 1208,  484, 1212,  480, 1210,  484, 1208,  484, 1208,  1322, 7238,  1324, 374,  1320, 372,  484, 1212,  1324, 372,  1320, 374,  482, 1214,  484, 1208,  486, 1208,  484, 1210,  484, 1210,  484, 1208,  1324, 7238,  1322, 374,  1320, 372,  484, 1214,  1322, 372,  1320, 374,  482, 1214,  484, 1210,  484, 1210,  484, 1208,  486, 1208,  484, 1206,  1324};  // SYMPHONY D81
uint16_t kipason[119] = {1322, 374,  1320, 374,  482, 1214,  1322, 372,  1320, 374,  482, 1216,  484, 1208,  484, 1210,  484, 1210,  482, 1208,  1322, 374,  482, 8078,  1322, 374,  1320, 374,  482, 1214,  1322, 372,  1322, 374,  482, 1214,  484, 1210,  484, 1210,  484, 1208,  484, 1208,  1322, 374,  482, 8078,  1322, 374,  1320, 374,  482, 1214,  1322, 374,  1320, 374,  480, 1216,  484, 1210,  482, 1210,  484, 1210,  482, 1210,  1320, 376,  480, 8080,  1322, 374,  1318, 376,  480, 1216,  1318, 376,  1318, 378,  478, 1218,  478, 1214,  480, 1212,  478, 1214,  482, 1212,  1316, 378,  478, 8082,  1318, 380,  1314, 380,  476, 1220,  1316, 380,  1314, 380,  476, 1220,  476, 1218,  478, 1214,  476, 1218,  476, 1216,  1314, 380,  476};  // SYMPHONY D82
uint16_t kipasmid[143] = {1340, 354,  1338, 356,  474, 1222,  1338, 354,  1312, 382,  474, 1222,  500, 1194,  474, 1220,  472, 1218,  476, 1216,  1314, 384,  474, 8086,  1340, 356,  1338, 356,  478, 1218,  1340, 354,  1338, 356,  476, 1220,  502, 1192,  476, 1218,  476, 1214,  500, 1196,  1340, 356,  476, 8084,  1314, 384,  1310, 386,  470, 1224,  1312, 384,  1308, 388,  468, 1228,  468, 1224,  420, 1274,  420, 1276,  418, 1274,  1258, 438,  416, 8144,  1258, 438,  1256, 440,  416, 1280,  1256, 438,  1256, 440,  416, 1278,  418, 1276,  418, 1274,  420, 1274,  418, 1274,  1258, 438,  416, 8144,  1258, 438,  1256, 438,  416, 1278,  1258, 438,  1286, 408,  448, 1248,  450, 1242,  452, 1240,  456, 1238,  478, 1214,  1320, 376,  478, 8080,  1324, 372,  1320, 374,  482, 1212,  1324, 372,  1322, 372,  484, 1212,  484, 1208,  486, 1208,  484, 1210,  484, 1210,  1322, 374,  482};  // SYMPHONY D82
uint16_t kipashigh[119] = {1258, 438,  1256, 438,  416, 1278,  1258, 438,  1256, 438,  416, 1278,  418, 1276,  420, 1274,  420, 1274,  418, 1276,  1286, 410,  448, 8114,  1324, 372,  1320, 374,  480, 1216,  1320, 376,  1316, 378,  478, 1218,  480, 1214,  478, 1216,  478, 1216,  478, 1216,  1318, 378,  476, 8086,  1326, 370,  1322, 374,  482, 1214,  1324, 374,  1320, 372,  482, 1214,  484, 1210,  484, 1210,  484, 1208,  484, 1208,  1324, 374,  484, 8078,  1324, 374,  1320, 374,  482, 1212,  1324, 372,  1322, 374,  482, 1212,  486, 1210,  484, 1208,  486, 1208,  486, 1206,  1326, 372,  482, 8078,  1326, 372,  1322, 374,  482, 1212,  1324, 374,  1320, 374,  482, 1214,  482, 1210,  484, 1212,  484, 1208,  484, 1210,  1322, 374,  482};  // SYMPHONY D82

//Polytron
uint16_t Polytron16[227] = {3714, 1512,  578, 1110,  472, 1216,  546, 478,  524, 480,  522, 478,  450, 1214,  550, 476,  526, 476,  526, 1118,  576, 1108,  472, 532,  556, 1128,  552, 474,  530, 472,  450, 1216,  554, 1114,  526, 478,  576, 1106,  554, 1116,  566, 480,  530, 472,  530, 1112,  582, 446,  542, 480,  532, 1110,  528, 478,  572, 456,  542, 480,  532, 470,  530, 470,  450, 554,  450, 534,  560, 440,  576, 470,  532, 470,  532, 470,  532, 470,  532, 474,  500, 480,  566, 464,  544, 436,  562, 482,  532, 1110,  574, 432,  580, 446,  538, 1122,  470, 534,  574, 474,  538, 1100,  474, 1216,  554, 470,  532, 470,  532, 472,  450, 554,  448, 534,  562, 484,  532, 1108,  472, 1216,  556, 1110,  524, 1162,  556, 472,  530, 472,  448, 532,  562, 444,  566, 1116,  554, 472,  450, 1216,  554, 472,  530, 1112,  580, 450,  538, 480,  530, 472,  532, 470,  450, 552,  450, 534,  554, 450,  582, 446,  540, 482,  530, 472,  530, 476,  494, 504,  500, 482,  560, 446,  566, 478,  530, 472,  530, 472,  530, 474,  448, 534,  526, 476,  564, 464,  542, 480,  528, 476,  526, 476,  526, 476,  448, 532,  528, 478,  558, 442,  576, 470,  524, 478,  526, 476,  524, 478,  448, 532,  558, 446,  568, 478,  532, 470,  522, 480,  524, 478,  522, 480,  450, 534,  562, 1124,  544, 1122,  572, 474,  548};  // UNKNOWN 3685C815
uint16_t Polytronoff[227] = {3732, 1516,  474, 1214,  508, 1158,  522, 482,  528, 498,  542, 482,  484, 1158,  524, 480,  530, 516,  518, 1144,  450, 1216,  506, 518,  484, 1162,  532, 496,  534, 488,  482, 1160,  518, 1166,  566, 466,  518, 1168,  508, 1158,  528, 476,  532, 496,  534, 1124,  470, 536,  528, 518,  520, 1118,  474, 552,  450, 534,  532, 472,  566, 458,  536, 486,  484, 518,  484, 498,  470, 532,  518, 488,  524, 504,  536, 484,  486, 516,  484, 518,  452, 550,  450, 534,  520, 484,  526, 500,  540, 482,  484, 518,  482, 520,  484, 1184,  542, 482,  484, 518,  484, 1160,  532, 1152,  508, 518,  450, 534,  526, 476,  532, 496,  536, 484,  484, 520,  484, 1160,  534, 1172,  450, 1220,  534, 1124,  472, 532,  522, 484,  564, 460,  534, 488,  482, 1160,  524, 478,  530, 1154,  506, 498,  518, 1166,  508, 518,  482, 520,  484, 500,  520, 482,  530, 474,  534, 492,  534, 488,  484, 518,  484, 518,  450, 534,  468, 562,  534, 444,  566, 458,  536, 486,  484, 518,  486, 516,  450, 554,  448, 534,  532, 514,  486, 516,  488, 514,  486, 516,  450, 552,  450, 532,  522, 484,  526, 500,  538, 484,  486, 514,  486, 514,  490, 514,  450, 532,  526, 478,  560, 468,  540, 482,  490, 514,  488, 514,  488, 516,  496, 1166,  542, 1122,  560, 1126,  542, 482,  518, 1154,  540, 480,  548};  // UNKNOWN 3AD06B41
uint16_t Polytronon[227] = {3614, 1590,  568, 1120,  522, 1164,  548, 476,  524, 478,  448, 534,  524, 1160,  548, 478,  524, 458,  520, 1164,  550, 1114,  526, 482,  562, 1120,  472, 552,  498, 484,  558, 1128,  550, 1120,  566, 478,  534, 1106,  526, 1162,  550, 474,  526, 476,  528, 1118,  564, 480,  526, 478,  528, 1116,  576, 452,  540, 480,  528, 474,  528, 474,  450, 552,  496, 488,  572, 474,  530, 474,  526, 476,  524, 478,  524, 478,  450, 554,  498, 482,  560, 470,  540, 480,  524, 480,  522, 480,  524, 1146,  544, 476,  522, 480,  524, 1118,  566, 438,  574, 472,  522, 1122,  560, 1124,  546, 480,  522, 480,  450, 534,  562, 442,  570, 458,  540, 480,  548, 1122,  568, 1118,  544, 1144,  554, 1128,  506, 482,  560, 442,  570, 476,  526, 478,  520, 1122,  566, 438,  570, 1110,  474, 552,  450, 1216,  546, 480,  520, 482,  450, 534,  522, 480,  556, 450,  566, 478,  522, 480,  522, 480,  522, 480,  448, 556,  498, 484,  562, 468,  538, 480,  526, 478,  524, 478,  526, 476,  448, 532,  528, 476,  566, 480,  550, 480,  526, 476,  528, 474,  450, 554,  498, 484,  578, 450,  540, 480,  528, 474,  550, 482,  498, 482,  562, 440,  574, 472,  538, 466,  530, 472,  530, 472,  530, 454,  522, 480,  570, 434,  580, 448,  540, 480,  530, 472,  532, 1112,  582, 1102,  472, 532,  554};  // UNKNOWN 17D62C71
uint16_t Polytron17[227] = {3678, 1548,  538, 1150,  512, 1156,  534, 514,  522, 480,  486, 516,  488, 1156,  564, 466,  536, 484,  486, 1158,  562, 1120,  540, 486,  450, 1220,  540, 482,  518, 484,  522, 1124,  570, 1114,  472, 532,  524, 1162,  552, 1116,  566, 464,  542, 478,  530, 1112,  556, 448,  568, 478,  548, 1118,  526, 482,  580, 448,  540, 478,  532, 472,  532, 470,  450, 552,  450, 534,  526, 476,  566, 460,  506, 514,  532, 470,  532, 472,  450, 554,  448, 532,  494, 512,  492, 550,  522, 480,  492, 1152,  496, 508,  500, 546,  458, 1184,  472, 532,  498, 532,  472, 1186,  474, 1196,  552, 492,  456, 546,  456, 548,  450, 554,  448, 534,  558, 490,  516, 486,  518, 1120,  474, 1214,  544, 1122,  556, 450,  494, 528,  546, 456,  544, 484,  474, 1216,  544, 458,  546, 1120,  570, 434,  522, 1160,  474, 530,  472, 532,  572, 452,  542, 458,  542, 462,  542, 460,  472, 530,  474, 530,  472, 536,  492, 510,  520, 504,  542, 460,  544, 460,  542, 460,  472, 532,  470, 534,  564, 460,  544, 458,  544, 458,  544, 482,  520, 462,  470, 532,  498, 506,  568, 478,  520, 458,  544, 458,  544, 484,  448, 528,  472, 534,  564, 440,  566, 438,  552, 490,  520, 484,  516, 484,  450, 532,  546, 1138,  534, 1136,  546, 1134,  480, 1190,  494, 1188,  474, 532,  470, 1214,  516, 510,  532};  // UNKNOWN 67B1CA9F
uint16_t Polytron18[227] = {3678, 1548,  556, 1132,  512, 1156,  566, 482,  522, 480,  490, 512,  516, 1128,  568, 462,  538, 480,  518, 1124,  564, 1120,  548, 480,  448, 1220,  540, 480,  524, 480,  528, 1116,  576, 1108,  470, 532,  524, 1162,  554, 1114,  566, 464,  542, 478,  530, 1110,  528, 478,  570, 478,  548, 1118,  526, 482,  580, 448,  540, 480,  530, 472,  532, 470,  448, 552,  450, 534,  556, 448,  558, 468,  540, 480,  532, 472,  530, 472,  450, 554,  500, 480,  560, 446,  562, 482,  532, 472,  530, 1112,  566, 440,  576, 470,  538, 1102,  526, 480,  566, 460,  548, 1112,  474, 1194,  566, 478,  532, 472,  530, 472,  450, 552,  500, 484,  574, 472,  536, 1104,  472, 554,  500, 1162,  554, 1112,  564, 466,  540, 480,  530, 474,  530, 474,  524, 1164,  552, 474,  528, 1114,  578, 452,  540, 1116,  472, 532,  522, 482,  578, 468,  528, 474,  526, 476,  526, 474,  450, 552,  496, 486,  530, 476,  558, 468,  540, 480,  526, 478,  524, 478,  526, 478,  498, 482,  562, 442,  570, 476,  526, 478,  526, 476,  526, 478,  522, 458,  526, 478,  564, 440,  572, 456,  538, 482,  522, 480,  524, 480,  448, 552,  450, 534,  568, 436,  576, 452,  538, 482,  524, 478,  524, 478,  450, 534,  524, 480,  556, 1126,  550, 1120,  564, 1116,  474, 1214,  552, 474,  526, 1116,  568, 482,  548};  // UNKNOWN 7B052D92
uint16_t Polytron19[227] = {3704, 1518,  566, 1122,  474, 1200,  552, 464,  538, 466,  536, 466,  472, 1218,  536, 466,  538, 464,  538, 1136,  554, 1124,  474, 532,  550, 1134,  538, 464,  472, 530,  474, 1214,  538, 1132,  552, 450,  556, 1124,  538, 1134,  556, 464,  536, 468,  536, 1132,  558, 448,  554, 464,  536, 1132,  554, 450,  558, 466,  534, 466,  538, 466,  536, 466,  472, 530,  474, 538,  518, 484,  558, 464,  534, 466,  538, 466,  536, 464,  474, 530,  518, 490,  546, 474,  538, 466,  536, 464,  538, 1130,  552, 472,  534, 466,  538, 1128,  522, 482,  556, 468,  562, 1128,  520, 1166,  538, 464,  536, 466,  472, 532,  522, 486,  554, 466,  536, 466,  536, 466,  538, 466,  536, 1132,  558, 1126,  472, 534,  554, 450,  556, 448,  552, 466,  536, 1132,  556, 448,  560, 1120,  474, 532,  472, 1214,  536, 468,  536, 466,  472, 534,  468, 534,  522, 506,  530, 468,  502, 524,  476, 502,  502, 502,  472, 532,  470, 536,  522, 504,  534, 488,  480, 522,  478, 524,  480, 522,  450, 532,  518, 486,  524, 522,  540, 490,  482, 520,  482, 520,  450, 534,  514, 488,  534, 494,  532, 488,  482, 520,  482, 518,  450, 552,  450, 532,  522, 484,  568, 460,  536, 484,  484, 518,  486, 496,  468, 1218,  508, 516,  486, 1158,  528, 1156,  510, 1156,  562, 486,  486, 1154,  526, 480,  580};  // UNKNOWN 2F367D39
uint16_t Polytron20[227] = {3712, 1514,  520, 1170,  506, 1160,  526, 480,  530, 514,  482, 520,  482, 1160,  528, 476,  532, 512,  482, 1158,  472, 1214,  506, 520,  482, 1164,  564, 482,  480, 522,  480, 1164,  520, 1164,  502, 522,  452, 1214,  502, 1162,  470, 536,  524, 502,  504, 1156,  470, 534,  518, 508,  530, 1128,  534, 470,  470, 536,  548, 454,  556, 446,  556, 464,  536, 466,  536, 468,  536, 466,  472, 536,  556, 450,  556, 466,  534, 466,  536, 466,  538, 466,  472, 536,  516, 486,  550, 454,  556, 1122,  474, 530,  522, 488,  550, 1130,  538, 464,  474, 534,  522, 1162,  538, 1130,  556, 470,  536, 466,  536, 466,  536, 466,  536, 468,  472, 538,  546, 1136,  536, 1132,  556, 448,  560, 1120,  474, 536,  524, 480,  558, 448,  558, 464,  534, 1158,  526, 498,  502, 1162,  472, 534,  520, 1164,  504, 522,  480, 502,  470, 536,  524, 478,  530, 516,  480, 522,  480, 528,  476, 522,  480, 504,  520, 484,  524, 520,  490, 492,  534, 488,  482, 520,  482, 522,  450, 534,  468, 536,  528, 474,  566, 480,  482, 520,  482, 520,  482, 518,  450, 554,  448, 536,  532, 494,  534, 488,  484, 518,  542, 490,  446, 534,  524, 480,  530, 474,  566, 478,  484, 518,  486, 518,  484, 502,  544, 484,  566, 458,  538, 1124,  472, 1214,  510, 1156,  526, 504,  534, 1122,  474, 532,  540};  // UNKNOWN B9793955
uint16_t Polytron21[227] = {3684, 1540,  560, 1126,  558, 1128,  538, 466,  536, 466,  524, 480,  556, 1130,  538, 466,  536, 470,  532, 1152,  536, 1130,  556, 450,  558, 1124,  538, 464,  474, 534,  554, 1130,  538, 1152,  536, 448,  552, 1126,  472, 1216,  538, 466,  538, 464,  474, 1218,  534, 466,  536, 466,  536, 1132,  556, 468,  534, 468,  472, 530,  536, 468,  534, 468,  472, 536,  526, 496,  542, 464,  504, 496,  506, 496,  506, 496,  472, 556,  446, 536,  514, 488,  562, 484,  478, 500,  502, 500,  504, 1168,  554, 490,  480, 522,  480, 1164,  522, 506,  506, 516,  480, 1162,  518, 1168,  504, 522,  480, 522,  480, 502,  520, 484,  526, 478,  564, 482,  480, 522,  482, 1162,  528, 476,  562, 1120,  474, 534,  524, 478,  530, 498,  532, 488,  540, 1130,  530, 518,  482, 1160,  516, 488,  524, 1160,  504, 518,  482, 500,  518, 488,  552, 450,  532, 496,  534, 486,  482, 520,  484, 518,  450, 532,  522, 482,  528, 518,  522, 460,  536, 486,  486, 516,  484, 518,  450, 554,  448, 534,  532, 472,  564, 480,  486, 516,  486, 516,  486, 516,  450, 532,  520, 486,  562, 466,  536, 484,  486, 516,  486, 516,  450, 552,  450, 532,  524, 480,  530, 496,  538, 486,  486, 516,  486, 494,  496, 1216,  510, 1156,  522, 482,  564, 1118,  474, 1218,  538, 484,  486, 1156,  526, 502,  570};  // UNKNOWN 48C9BAC7
uint16_t Polytron22[227] = {3690, 1538,  558, 1130,  558, 1126,  538, 464,  538, 468,  546, 458,  558, 1124,  538, 464,  472, 538,  580, 1126,  538, 1136,  552, 466,  536, 1128,  556, 448,  558, 466,  536, 1126,  532, 1154,  538, 466,  538, 1132,  556, 1126,  536, 464,  472, 534,  556, 1128,  536, 466,  536, 470,  470, 1214,  538, 466,  536, 466,  474, 530,  472, 534,  520, 486,  560, 464,  532, 470,  506, 496,  504, 498,  474, 532,  470, 534,  522, 508,  504, 518,  478, 524,  478, 524,  474, 534,  522, 482,  526, 1158,  504, 522,  450, 534,  468, 1216,  506, 520,  484, 500,  468, 1216,  504, 1160,  520, 486,  564, 462,  534, 488,  482, 518,  484, 518,  450, 534,  466, 1240,  484, 518,  486, 516,  450, 1214,  510, 516,  486, 518,  486, 518,  486, 496,  520, 1164,  510, 516,  486, 1158,  562, 484,  488, 1154,  526, 478,  530, 472,  562, 484,  544, 486,  486, 516,  450, 532,  522, 482,  528, 498,  538, 484,  488, 514,  486, 494,  498, 534,  530, 474,  564, 464,  536, 484,  488, 514,  488, 514,  488, 514,  450, 536,  516, 486,  566, 460,  540, 482,  488, 514,  492, 510,  450, 552,  450, 534,  562, 484,  524, 480,  516, 484,  518, 484,  490, 512,  450, 556,  494, 486,  558, 472,  538, 482,  516, 486,  516, 1124,  562, 468,  540, 1118,  472, 1214,  544, 482,  520, 1124,  564, 482,  546};  // UNKNOWN AF35E053
uint16_t Polytron23[227] = {3698, 1520,  560, 1128,  538, 1130,  558, 446,  556, 466,  536, 466,  536, 1130,  558, 448,  556, 464,  538, 1126,  524, 1162,  538, 464,  536, 1134,  554, 466,  536, 464,  538, 1132,  556, 1126,  536, 466,  520, 1168,  538, 1128,  554, 452,  558, 468,  536, 1124,  522, 482,  554, 454,  554, 1124,  538, 466,  522, 484,  554, 450,  556, 464,  540, 464,  536, 466,  534, 468,  534, 470,  470, 536,  554, 450,  558, 448,  552, 466,  536, 466,  536, 466,  538, 472,  546, 484,  552, 466,  536, 1130,  470, 536,  524, 504,  504, 1154,  472, 534,  468, 538,  524, 1158,  502, 1166,  564, 484,  478, 522,  480, 500,  502, 502,  472, 534,  520, 508,  532, 448,  560, 484,  478, 524,  478, 1166,  530, 500,  530, 490,  480, 522,  480, 524,  450, 1216,  534, 490,  480, 1162,  520, 486,  564, 1118,  472, 552,  450, 532,  522, 526,  484, 518,  480, 522,  482, 520,  482, 520,  450, 532,  468, 536,  524, 504,  532, 490,  480, 522,  482, 520,  482, 520,  448, 534,  520, 484,  526, 478,  530, 514,  484, 518,  482, 520,  484, 520,  448, 534,  524, 480,  528, 476,  566, 478,  484, 520,  482, 520,  482, 520,  450, 532,  528, 476,  532, 496,  534, 486,  482, 520,  484, 518,  482, 500,  468, 1218,  506, 518,  484, 520,  450, 1218,  536, 1146,  450, 532,  524, 1160,  508, 520,  474};  // UNKNOWN 849D0621
uint16_t Polytron24[227] = {3708, 1518,  514, 1176,  510, 1154,  526, 478,  534, 470,  564, 482,  486, 1154,  530, 476,  532, 514,  522, 1118,  472, 1214,  512, 514,  494, 1150,  566, 464,  538, 484,  488, 1152,  524, 1162,  568, 464,  522, 1162,  512, 1154,  532, 472,  566, 462,  538, 1122,  470, 536,  532, 514,  524, 1114,  474, 552,  494, 490,  562, 442,  566, 478,  490, 512,  488, 514,  490, 492,  468, 532,  522, 484,  528, 498,  538, 484,  516, 486,  494, 508,  450, 552,  450, 534,  526, 476,  560, 468,  538, 1120,  518, 486,  528, 476,  562, 1122,  544, 484,  496, 486,  558, 1124,  544, 1122,  570, 476,  522, 480,  522, 480,  524, 478,  524, 458,  528, 478,  560, 1120,  548, 1120,  578, 1106,  472, 532,  528, 476,  566, 464,  544, 476,  528, 474,  528, 1116,  570, 434,  580, 1104,  472, 534,  562, 1122,  552, 472,  530, 472,  450, 536,  566, 438,  576, 452,  538, 480,  530, 472,  530, 472,  530, 472,  450, 534,  568, 478,  538, 446,  540, 480,  530, 472,  530, 472,  450, 552,  500, 486,  556, 448,  574, 472,  530, 472,  530, 470,  532, 472,  450, 554,  498, 482,  562, 444,  566, 478,  532, 472,  530, 472,  530, 472,  450, 532,  528, 474,  568, 462,  542, 478,  532, 472,  532, 470,  532, 474,  498, 482,  560, 444,  574, 1110,  554, 1114,  578, 470,  530, 1112,  564, 440,  598};  // UNKNOWN F8F85FAB
uint16_t Polytron25[227] = {3706, 1504,  554, 1132,  556, 1124,  538, 466,  558, 448,  558, 448,  556, 1124,  538, 468,  558, 452,  554, 1124,  538, 1134,  554, 466,  536, 1130,  546, 458,  558, 446,  556, 1122,  474, 1216,  538, 464,  538, 1132,  556, 1124,  472, 530,  472, 534,  522, 1162,  536, 464,  474, 536,  468, 1214,  536, 466,  534, 468,  534, 470,  472, 534,  522, 482,  530, 492,  504, 498,  502, 502,  502, 524,  478, 504,  516, 488,  524, 478,  528, 518,  478, 524,  478, 524,  480, 522,  450, 532,  520, 1164,  504, 522,  482, 522,  450, 1216,  504, 520,  482, 522,  482, 1188,  532, 1126,  472, 532,  518, 488,  532, 494,  534, 488,  484, 518,  484, 520,  448, 554,  448, 1216,  508, 1158,  526, 480,  556, 488,  486, 516,  486, 516,  486, 498,  468, 1216,  510, 516,  486, 1156,  532, 472,  562, 1120,  472, 534,  524, 478,  558, 488,  524, 478,  488, 514,  488, 514,  486, 516,  450, 534,  530, 474,  562, 442,  568, 476,  544, 484,  450, 552,  450, 532,  526, 478,  558, 468,  538, 484,  488, 514,  490, 492,  468, 556,  496, 484,  530, 474,  562, 484,  488, 514,  488, 514,  490, 514,  450, 534,  524, 478,  556, 446,  566, 480,  488, 514,  490, 512,  490, 514,  448, 534,  526, 480,  558, 1122,  528, 1140,  570, 1112,  472, 534,  558, 1126,  514, 512,  504, 1168,  538, 482,  548};  // UNKNOWN F7AE4C7D
uint16_t Polytron26[227] = {3696, 1508,  556, 1130,  558, 1126,  538, 466,  524, 480,  556, 448,  558, 1126,  536, 466,  524, 486,  554, 1128,  538, 1132,  556, 448,  554, 1124,  474, 534,  558, 446,  558, 1124,  536, 1152,  536, 464,  538, 1130,  546, 1136,  538, 464,  474, 530,  518, 1170,  538, 464,  538, 466,  470, 1216,  536, 466,  536, 466,  536, 464,  474, 530,  524, 482,  556, 452,  554, 464,  538, 466,  536, 464,  538, 464,  472, 534,  552, 452,  556, 470,  534, 466,  536, 466,  538, 464,  538, 466,  522, 1164,  538, 464,  538, 464,  538, 1134,  556, 464,  538, 466,  536, 1134,  556, 1124,  538, 464,  472, 536,  556, 448,  556, 452,  548, 466,  538, 464,  536, 1134,  560, 462,  534, 1128,  520, 488,  546, 458,  556, 466,  534, 466,  538, 466,  536, 1134,  556, 464,  538, 1128,  520, 484,  552, 1130,  538, 466,  472, 532,  520, 488,  524, 476,  560, 462,  506, 494,  506, 496,  502, 502,  470, 534,  520, 484,  526, 496,  534, 518,  478, 524,  450, 552,  450, 532,  518, 488,  564, 462,  506, 516,  480, 522,  482, 520,  450, 554,  448, 534,  522, 508,  532, 488,  480, 522,  480, 522,  480, 502,  468, 532,  468, 536,  526, 502,  536, 486,  482, 522,  480, 520,  482, 520,  450, 534,  522, 480,  528, 1156,  506, 1162,  566, 480,  482, 1158,  526, 478,  532, 1152,  506, 500,  538};  // UNKNOWN 94A6C8B3
uint16_t Polytron27[227] = {3728, 1496,  526, 1164,  556, 1110,  564, 442,  576, 428,  572, 472,  532, 1110,  568, 436,  580, 468,  532, 1108,  472, 1214,  556, 470,  532, 1112,  582, 446,  506, 514,  532, 1114,  576, 1106,  554, 470,  450, 1214,  556, 1108,  472, 534,  560, 468,  504, 1154,  472, 532,  492, 514,  492, 1190,  556, 472,  450, 532,  532, 472,  574, 472,  538, 464,  532, 472,  532, 470,  532, 476,  444, 534,  566, 438,  578, 428,  564, 480,  530, 470,  532, 472,  530, 454,  548, 482,  566, 478,  532, 1108,  524, 482,  562, 444,  564, 1116,  474, 532,  526, 478,  566, 1116,  554, 1112,  582, 464,  532, 472,  530, 472,  532, 472,  498, 482,  560, 446,  564, 438,  572, 474,  532, 1110,  566, 436,  578, 426,  566, 478,  530, 470,  532, 472,  448, 1196,  566, 478,  532, 1112,  574, 430,  580, 1100,  474, 552,  500, 484,  576, 472,  532, 468,  532, 472,  530, 470,  532, 472,  450, 554,  500, 484,  560, 444,  564, 478,  532, 472,  532, 470,  532, 472,  448, 532,  530, 474,  568, 460,  540, 480,  532, 472,  530, 472,  530, 474,  498, 482,  560, 444,  572, 472,  532, 470,  530, 472,  530, 470,  532, 474,  502, 476,  566, 438,  578, 468,  532, 470,  532, 472,  530, 472,  528, 454,  522, 1158,  556, 472,  530, 1114,  582, 446,  540, 1118,  522, 484,  576, 1108,  554, 472,  528};  // UNKNOWN A14EB5C7
uint16_t Polytron28[227] = {3714, 1512,  554, 1114,  580, 1102,  472, 534,  560, 442,  574, 430,  574, 1108,  472, 534,  564, 464,  544, 1114,  554, 1140,  540, 480,  530, 1112,  528, 476,  580, 446,  540, 1116,  524, 1166,  556, 470,  530, 1116,  564, 1116,  474, 532,  524, 480,  564, 1120,  552, 472,  450, 534,  556, 1128,  552, 472,  530, 474,  498, 482,  558, 444,  572, 476,  534, 466,  530, 472,  530, 474,  528, 476,  446, 534,  564, 440,  576, 428,  570, 474,  530, 472,  530, 474,  530, 452,  524, 478,  570, 1116,  552, 472,  450, 552,  450, 1216,  554, 472,  532, 474,  446, 1216,  554, 1110,  524, 482,  560, 444,  564, 480,  530, 472,  530, 472,  530, 452,  524, 1160,  554, 1110,  526, 480,  570, 458,  542, 480,  532, 472,  530, 472,  530, 452,  526, 1158,  554, 470,  532, 1112,  578, 470,  536, 1104,  524, 480,  568, 436,  578, 468,  548, 480,  532, 470,  450, 554,  500, 484,  560, 444,  564, 480,  532, 470,  530, 472,  530, 472,  450, 532,  528, 476,  568, 460,  542, 480,  532, 472,  530, 472,  450, 534,  524, 476,  560, 444,  572, 432,  564, 480,  532, 472,  530, 472,  530, 472,  448, 536,  520, 482,  582, 446,  540, 480,  532, 470,  530, 474,  448, 554,  454, 530,  554, 492,  538, 466,  530, 472,  530, 1112,  562, 446,  564, 1116,  474, 532,  524, 1162,  554, 472,  550};  // UNKNOWN D77DF67A
uint16_t Polytron29[227] = {3666, 1558,  504, 1190,  532, 1126,  472, 532,  516, 488,  566, 462,  534, 1148,  450, 532,  522, 528,  484, 1154,  474, 1214,  512, 514,  488, 1156,  530, 474,  562, 484,  488, 1152,  522, 1164,  540, 484,  516, 1128,  570, 1112,  474, 534,  558, 446,  564, 1118,  542, 484,  450, 536,  518, 1162,  544, 482,  520, 482,  450, 534,  522, 480,  570, 458,  538, 482,  512, 490,  488, 514,  450, 552,  450, 532,  526, 478,  572, 454,  538, 484,  490, 512,  488, 494,  468, 556,  494, 486,  530, 1154,  520, 506,  450, 532,  522, 1164,  512, 514,  488, 494,  516, 1168,  538, 1126,  530, 476,  562, 440,  568, 478,  498, 504,  518, 486,  488, 494,  546, 484,  570, 1112,  472, 554,  494, 488,  528, 476,  572, 454,  540, 482,  522, 478,  548, 1148,  540, 480,  528, 1116,  572, 432,  580, 1102,  472, 532,  526, 478,  574, 472,  536, 468,  530, 472,  530, 472,  530, 470,  450, 534,  526, 478,  578, 448,  542, 480,  530, 472,  532, 470,  450, 552,  450, 532,  528, 478,  582, 446,  540, 480,  530, 472,  550, 458,  528, 476,  530, 474,  576, 450,  540, 482,  532, 470,  532, 470,  450, 534,  524, 478,  560, 444,  562, 482,  530, 472,  530, 472,  532, 470,  450, 554,  448, 578,  558, 1108,  474, 1214,  554, 470,  532, 472,  530, 1114,  564, 480,  532, 1112,  572, 434,  604};  // UNKNOWN 7BD3BF65
uint16_t Polytron30[227] = {3700, 1524,  562, 1124,  474, 1216,  508, 496,  502, 500,  472, 554,  450, 1214,  504, 522,  482, 502,  468, 1216,  506, 1160,  518, 486,  526, 1158,  508, 516,  488, 494,  522, 1162,  512, 1156,  560, 444,  566, 1116,  472, 1220,  540, 480,  520, 482,  522, 1150,  544, 474,  524, 480,  526, 1118,  578, 450,  540, 480,  528, 476,  526, 476,  450, 550,  450, 534,  526, 520,  536, 446,  540, 482,  526, 476,  526, 476,  450, 552,  498, 484,  558, 448,  570, 474,  526, 476,  524, 478,  526, 1118,  566, 480,  522, 478,  522, 1122,  564, 464,  542, 478,  524, 1118,  530, 1156,  548, 478,  522, 484,  448, 532,  558, 446,  566, 436,  572, 472,  524, 1120,  562, 440,  572, 458,  538, 482,  520, 482,  520, 482,  522, 480,  450, 536,  560, 1122,  544, 480,  450, 1218,  542, 480,  524, 1120,  556, 448,  570, 474,  524, 478,  524, 478,  524, 478,  450, 532,  522, 482,  560, 468,  538, 482,  522, 480,  522, 484,  472, 534,  562, 442,  568, 436,  570, 476,  522, 480,  522, 480,  518, 484,  450, 536,  558, 444,  568, 460,  538, 482,  518, 484,  518, 484,  450, 552,  450, 534,  560, 486,  528, 454,  540, 482,  516, 486,  518, 486,  448, 554,  494, 488,  526, 478,  568, 476,  490, 512,  488, 1154,  532, 500,  538, 482,  488, 1152,  522, 482,  558, 1126,  538, 466,  496};  // UNKNOWN AB78EAF9


void setup() {
  // put your setup code here, to run once:

 #if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
 #else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
 #endif  // ESP8266

 WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Wire.begin(5, 4);

  rtc.begin();
  

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);

 dht.begin();
 irsend.begin();

 pinMode(indi,OUTPUT);
 digitalWrite(indi,LOW);

 DateTime now = rtc.now();

 //Firebase.setString(firebaseData, "/"+Serialnumb+"/Jadwal/Hari", daysOfTheWeek[7][12]);
}

void status_remote(){

  DateTime now = rtc.now();
  
  Firebase.setInt(firebaseData, "/"+Serialnumb+"/cek/minutenow", now.minute());
}

void manual(){

  int man;
  if (Firebase.getInt(firebaseData, "/"+Serialnumb+"/onoff/status")){

    man = firebaseData.intData();
    Serial.println(man);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get man, ");
    Serial.println(firebaseData.errorReason());
  }

  if (man == 1 && a == 0){
    if (AC == false){
      AC_on();
    }
    a=1;
    b=0;
    stepAC=0;
  }
  else if(man == 0 && b==0){
    if(AC == true){
      AC_off();
    }
    a=0;
    b=1;
  }
}

void getSet(){

  if(Firebase.getInt(firebaseData, "/"+Serialnumb+"/setpoint/setpoint"))
  {
    //Success
    Serial.print("Get int data success, int = ");
    setsuhu = firebaseData.intData();
    Serial.println(setsuhu);

  }else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get setsuhu, ");
    Serial.println(firebaseData.errorReason());
  }
}


//void kirimsensor(){
//
//  t = dht.readTemperature();
//  h = dht.readHumidity();
//
//  if(Firebase.setInt(firebaseData, "/"+Serialnumb+"/suhu/suhunow", t))
//  {
//    //Success
//     Serial.println("kirim data suhu");
//
//  }else{
//    //Failed?, get the error reason from firebaseData
//
//    Serial.print("Gagal kirim data suhu, ");
//    Serial.println(firebaseData.errorReason());
//  }
//
//  if(Firebase.setInt(firebaseData, "/"+Serialnumb+"/suhu/humid", h))
//  {
//    //Success
//     Serial.println("kirim data kelembaban");
//
//  }else{
//    //Failed?, get the error reason from firebaseData
//
//    Serial.print("Gagal kirim data kelembaban, ");
//    Serial.println(firebaseData.errorReason());
//  }
//}

void kirimsensor(){

  Firebase.getInt(firebaseData, "/"+Serialnumb+"/suhu/suhunow");
  t = firebaseData.intData();

  Firebase.getInt(firebaseData, "/"+Serialnumb+"/suhu/humid");
  h = firebaseData.intData();

}

void serror(){

  error = t - setsuhu;

  if(Firebase.setInt(firebaseData, "/"+Serialnumb+"/maintanance/error", error))
  {
    //Success
     Serial.println("kirim data error");

  }else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Gagal kirim data error, ");
    Serial.println(firebaseData.errorReason());
  }
}

void starting(){

  unsigned long currentMillis = millis();
  
  if ( error > 0 && stepAC == 0 ){   

    AC_on();
    delay(jeda); 
    AC_16();
    p_error = error;
    stepAC = 1;
  }
  else if ( error < 0 && stepAC == 0 && AC == true && b == 0){   

    AC_off();
    stepAC = 1;
    a=2;
  }  
  else if ( error < 0 && stepAC == 0 && AC == true){   

    AC_30();
    stepAC = 1;
  }  

  Firebase.setInt(firebaseData, "/"+Serialnumb+"/maintanance/p_error", p_error);

  if (error == p_error+2 && stepAC == 1){

    notif1();
    AC_16();
    Serial.println(currentMillis);
    stepAC = 11;
  }
  
  else if ( error != 0 && (currentMillis > interval*60000) && stepAC == 1){

    notif1();
    AC_16();
    Serial.println(currentMillis);
    stepAC = 11;
  }
  else if (error == 0 && stepAC == 1) {

    AC_set();
    stepAC = 2;
  }
}

void otomatis(){

DateTime now = rtc.now();

  if(error == 0 && stepAC>1){

      save();
      
      if (p_error <= -1 && b==0){
        if (AC==false){
        AC_on();
        AC_set();
      }
      }
      
      if (AC==false && b==0){
        AC_on();
      }

      stepAC=2;
      //p_error = error;
    }

   if ( error == 1 && stepAC == 2){

    if (AC_temp == 16){

      notif1();
      AC_16();
      
    }
    else{

      AC_setk1();
      p_hour=now.hour();
      }
      
    stepAC=3;
    p_error = error-1;
   }

   if ( error == 2 && stepAC == 3){

    if (AC_temp == 16){

      notif1();
      AC_16();
      
    }
    else{

      AC_setk2();
      p_hour=now.hour();
    }
    stepAC=4;
    p_error = error-1;
   }

   if ( error == 3 && stepAC == 4){

    if (AC_temp == 16){

      notif1();
      AC_16();
      
    }
    else{

      AC_setk3();
      p_hour=now.hour();
    }
    stepAC=5;
    p_error = error-1;
   }

   if ( error == 4 && stepAC == 5){

    if (AC_temp == 16){

      notif1();
      AC_16();
      
    }
    else{

      AC_setk4();
      p_hour=now.hour();
    }
    stepAC=6;
    p_error = error-1;
   }

   if ( error == 5 && stepAC == 6){

    if (AC_temp == 16){

      notif1();
      AC_16();
      
    }
    else{

      AC_setk5();
      p_hour=now.hour();
    }
    stepAC=7;
    p_error = error-1;
   }

   if ( error == 6 && stepAC == 7){

    if (AC_temp == 16){

      notif1();
      AC_16();
    }
    else{

      AC_setk6();
      p_hour=now.hour();
    }
    
    stepAC=8;
    p_error = error-1;
   }

   if ( error == 7 && stepAC == 8){

    if (AC_temp == 16){

      notif1();
      AC_16();
    }
    else{

      AC_setk7();
      p_hour=now.hour();
    }
    
    stepAC=9;
    p_error = error-1;
   }

   if ( error >= 7 && stepAC == 9 ){

    if (AC_temp == 16){

      notif1();
      AC_16();
    }
    else{
      
      AC_16();
    }
    stepAC=10;
    p_error = error-1;
   }

   if ( error == -1 && stepAC == 2){

    if (AC_temp == 30){

      notif1();
      AC_off();
      
    }
    else{

      AC_sett1();
      p_hour=now.hour();
    }
    stepAC=3;
    p_error = error+1;
   }

    if ( error == -2 && stepAC == 3){

    if (AC_temp == 30){

      notif1();
      AC_off();
      
    }
    else{

      AC_sett2();
      p_hour=now.hour();
    }
    stepAC=4;
    p_error = error+1;
   }
   
   if ( error <= -2 && stepAC == 4){

    if (AC_temp == 30){

      notif1();
      AC_off();
      
    }
    else {

      AC_off();
    }
    stepAC=5;
    p_error = error+1;
   }

}

void reslide(){

  if (p_setsuhu - setsuhu ==1  ||  p_setsuhu - setsuhu == -1){
    
      stepAC=0;
    p_setsuhu = setsuhu;
   }
   else if (p_setsuhu == 0){
    
    p_setsuhu = setsuhu;
   }
   else if(p_setsuhu<setsuhu){

    p_setsuhu++;
   }
   else if(p_setsuhu>setsuhu){

    p_setsuhu--;
   }

   Firebase.setInt(firebaseData, "/"+Serialnumb+"/maintanance/p_setsuhu", p_setsuhu);
   Firebase.setInt(firebaseData, "/"+Serialnumb+"/maintanance/stepAC", stepAC);
}

void AC_state(){
  
  if(Firebase.setBool(firebaseData, "/"+Serialnumb+"/maintanance/AC_state", AC))
  {
    //Success
     Serial.println("kirim AC");

  }else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Gagal kirim AC, ");
    Serial.println(firebaseData.errorReason());
  }

  if(Firebase.setInt(firebaseData, "/"+Serialnumb+"/maintanance/AC_temp", AC_temp))
  {
    //Success
     Serial.println("kirim AC temp");

  }else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Gagal kirim AC temp, ");
    Serial.println(firebaseData.errorReason());
  }
}

void cek(){

DateTime now = rtc.now();
  if (error >0 && now.hour() == p_hour +2){

      notif1();
  }
}

void jam(){

  DateTime now = rtc.now();
  int jam_awal;
  int menit_awal;
  int jam_akhir;
  int menit_akhir;

  if (Firebase.getInt(firebaseData, "/"+Serialnumb+"/Jadwal/startjam")){

    jam_awal = firebaseData.intData();
    Serial.println(jam_awal);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get jam awal, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getInt(firebaseData, "/"+Serialnumb+"/Jadwal/startmenit")){

    menit_awal = firebaseData.intData();
    Serial.println(menit_awal);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get menit awal, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getInt(firebaseData, "/"+Serialnumb+"/Jadwal/stopjam")){

    jam_akhir = firebaseData.intData();
    Serial.println(jam_akhir);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get jam akhir, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getInt(firebaseData, "/"+Serialnumb+"/Jadwal/stopmenit")){

    menit_akhir = firebaseData.intData();
    Serial.println(menit_akhir);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get menit akhir, ");
    Serial.println(firebaseData.errorReason());
  }

  if (now.hour() == jam_awal){

    if(now.minute() == menit_awal){

      if (AC == false){
       AC_on();
       b=1;
      }
    }
  }

  if (now.hour() == jam_akhir){

    if(now.minute() == menit_akhir){

      if (AC == true){
       AC_off();
       a=0;
       b=0;
      }
    }
  }
}

void jadwal(){

  DateTime now = rtc.now();
  String hari1;
  String hari2;
  String hari3;
  String hari4;
  String hari5;
  String hari6;
  String hari7;

  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Ahad")){

    //ahad = firebaseData.stringData();
    // Define 
  hari1 = firebaseData.stringData(); 
  Serial.println(hari1);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get ahad, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/senin")){

    hari2 = firebaseData.stringData();
    Serial.println(hari2);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get senin, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Selasa")){

    hari3 = firebaseData.stringData();
    Serial.println(hari3);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get selasa, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Rabu")){

    hari4 = firebaseData.stringData();
    Serial.println(hari4);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get rabu, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Kamis")){

    hari5 = firebaseData.stringData();
    Serial.println(hari5);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get kamis, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Jumat")){

    hari6 = firebaseData.stringData();
    Serial.println(hari6);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get jumat, ");
    Serial.println(firebaseData.errorReason());
  }
  if (Firebase.getString(firebaseData, "/"+Serialnumb+"/Jadwal/Sabtu")){

    hari7 = firebaseData.stringData();
    Serial.println(hari7);
  }
  else{
    //Failed?, get the error reason from firebaseData

    Serial.print("Error in get sabtu, ");
    Serial.println(firebaseData.errorReason());
  }

  if(hari1 == "Ahad"){

     if ( daysOfTheWeek[now.dayOfTheWeek()]){
    
   jam();
  }
  }
  if(hari2 == "Senin"){
    
   if ( daysOfTheWeek[now.dayOfTheWeek()] ){

    jam();
 }
  }
  if(hari1 == "Selasa"){

     if ( daysOfTheWeek[now.dayOfTheWeek()]){
    
   jam();
  }
  }
  if(hari1 == "Rabu"){

     if ( daysOfTheWeek[now.dayOfTheWeek()] ){
    
   jam();
  }
  }
  if(hari1 == "Kamis"){

     if ( daysOfTheWeek[now.dayOfTheWeek()] ){
    
   jam();
  }
  }
  if(hari1 == "Jumat"){

     if ( daysOfTheWeek[now.dayOfTheWeek()] ){
    
   jam();
  }
  }
  if(hari1 == "Sabtu"){

     if ( daysOfTheWeek[now.dayOfTheWeek()] ){
    
   jam();
  }
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  
  DateTime now = rtc.now();
  status_remote();
  manual();
  jadwal();
  kirimsensor();
  getSet();
  serror();
  starting();
//  otomatis();
  cek();
  reslide();
  AC_state();
}

void AC_on(){
  
  Serial.println("AC_ON");
  analogWrite(indi,bright);
  irsend.sendRaw(Sharpon, 211, 38);  // Send a raw data capture at 38kHz.
  delay(jeda);
  irsend.sendRaw(Sharpon, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharpon, 211, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicon, 439, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicon, 439, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicon, 439, 38);
  delay(jeda);
  irsend.sendRaw(Polytronon, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytronon, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytronon, 227, 38);
  delay(jeda);
  irsend.sendRaw(kipason, 119, 38);

  AC = true;
}
void AC_off(){
  
  Serial.println("AC_OFF");
  digitalWrite(indi,LOW);
  irsend.sendRaw(Sharpoff, 211, 38);  // Send a raw data capture at 38kHz.
  delay(jeda);
  irsend.sendRaw(Sharpoff, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharpoff, 211, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicoff, 439, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicoff, 439, 38);
  delay(jeda);
  irsend.sendRaw(Panasonicoff, 439, 38);
   delay(jeda);
   irsend.sendRaw(Polytronoff, 227, 38);
  delay(jeda);
   irsend.sendRaw(Polytronoff, 227, 38);
  delay(jeda);
   irsend.sendRaw(Polytronoff, 227, 38);
  delay(jeda);
  irsend.sendRaw(kipasoff, 191, 38);

  AC = false;
}
void AC_16(){

  Serial.println("AC_ON_16");
  irsend.sendRaw(Sharp16, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp16, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp16, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron16, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron16, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron16, 227, 38);

  AC_temp = 16;
}
void AC_17(){
  
  Serial.println("AC_ON_17");
  irsend.sendRaw(Sharp17, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp17, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp17, 211, 38);
delay(jeda);
  irsend.sendRaw(Polytron17, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron17, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron17, 227, 38);
  AC_temp = 17;
}
void AC_18(){

  Serial.println("AC_ON_18");
  irsend.sendRaw(Sharp18, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp18, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp18, 211, 38);
delay(jeda);
  irsend.sendRaw(Polytron18, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron18, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron18, 227, 38);
  AC_temp = 18;
}
void AC_19(){

  Serial.println("AC_ON_19");
  irsend.sendRaw(Sharp19, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp19, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp19, 211, 38);
delay(jeda);
  irsend.sendRaw(Polytron19, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron19, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron19, 227, 38);
  AC_temp = 19;
}
void AC_20(){

  Serial.println("AC_ON_20");
  irsend.sendRaw(Sharp20, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp20, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp20, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron20, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron20, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron20, 227, 38);
  
  AC_temp = 20;
}
void AC_21(){

  Serial.println("AC_ON_21");
  irsend.sendRaw(Sharp21, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp21, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp21, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron21, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron21, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron21, 227, 38);
  
  AC_temp = 21;
}
void AC_22(){

  Serial.println("AC_ON_22");
  irsend.sendRaw(Sharp22, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp22, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp22, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron22, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron22, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron22, 227, 38);

  AC_temp = 22;
}
void AC_23(){

  Serial.println("AC_ON_23");
  irsend.sendRaw(Sharp23, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp23, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp23, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron23, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron23, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron23, 227, 38);
  
  AC_temp = 23;
}
void AC_24(){

  Serial.println("AC_ON_24");
  irsend.sendRaw(Sharp24, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp24, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp24, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron24, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron24, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron24, 227, 38);
  
  AC_temp = 24;
}
void AC_25(){

  Serial.println("AC_ON_25");
  irsend.sendRaw(Sharp25, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp25, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp25, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron25, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron25, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron25, 227, 38);
  
  AC_temp = 25;
}
void AC_26(){

Serial.println("AC_ON_26");
irsend.sendRaw(Sharp26, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp26, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp26, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron26, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron26, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron26, 227, 38);

  AC_temp = 26;
}
void AC_27(){

  Serial.println("AC_ON_27");
  irsend.sendRaw(Sharp27, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp27, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp27, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron27, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron27, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron27, 227, 38);
  
  AC_temp = 27;
}
void AC_28(){

 Serial.println("AC_ON_28");
 irsend.sendRaw(Sharp28, 211, 38);
 delay(jeda);
 irsend.sendRaw(Sharp28, 211, 38);
 delay(jeda);
 irsend.sendRaw(Sharp28, 211, 38);
 delay(jeda);
  irsend.sendRaw(Polytron28, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron28, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron28, 227, 38);
 
 AC_temp = 28;
}
void AC_29(){

  Serial.println("AC_ON_29");
  irsend.sendRaw(Sharp29, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp29, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp29, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron29, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron29, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron29, 227, 38);
  
  AC_temp = 29;
}
void AC_30(){

  Serial.println("AC_ON_30");
  irsend.sendRaw(Sharp30, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp30, 211, 38);
  delay(jeda);
  irsend.sendRaw(Sharp30, 211, 38);
  delay(jeda);
  irsend.sendRaw(Polytron30, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron30, 227, 38);
  delay(jeda);
  irsend.sendRaw(Polytron30, 227, 38);
  
  AC_temp = 30;
}

void notif1(){
  Serial.println("problem...");

  Firebase.setString(firebaseData, "/"+Serialnumb+"/notif/status", "problem...");
}

void save(){

  Firebase.setString(firebaseData, "/"+Serialnumb+"/notif/status", "save...");
}

void AC_set(){

  if(t==16){
    
      AC_16();
    }
    else if(t==17){

      AC_17();
    }
    else if(t==18){

      AC_18();
    }
    else if(t==19){

      AC_19();
    }
    else if(t==20){

      AC_20();
    }
    else if(t==21){

      AC_21();
    }
    else if(t==22){

      AC_22();
    }
    else if(t==23){

      AC_23();
    }
    else if(t==24){

      AC_24();
    }
    else if(t==25){

      AC_25();
    }
    else if(t==26){

      AC_26();
    }
    else if(t==27){

      AC_27();
    }
    else if(t==28){

      AC_28();
    }
    else if(t==29){

      AC_29();
    }
    else if(t==30){

      AC_30();
    }
    
}

void AC_setk1(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_17();
    }
    else if(t==21){

      AC_18();
    }
    else if(t==22){

      AC_19();
    }
    else if(t==23){

      AC_20();
    }
    else if(t==24){

      AC_21();
    }
    else if(t==25){

      AC_22();
    }
    else if(t==26){

      AC_23();
    }
    else if(t==27){

      AC_24();
    }
    else if(t==28){

      AC_25();
    }
    else if(t==29){

      AC_26();
    }
    else if(t==30){

      AC_27();
    }
    else if(t==31){

      AC_28();
    }
}

void AC_setk2(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){

      AC_17();
    }
    else if(t==24){

      AC_18();
    }
    else if(t==25){

      AC_19();
    }
    else if(t==26){

      AC_20();
    }
    else if(t==27){

      AC_21();
    }
    else if(t==28){

      AC_22();
    }
    else if(t==29){

      AC_23();
    }
    else if(t==30){

      AC_24();
    }
    else if(t==31){

      AC_25();
    }
    else if(t==32){

      AC_26();
    }
}

void AC_setk3(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){
;
      AC_16();
    }
    else if(t==24){

      AC_16();
    }
    else if(t==25){

      AC_16();
    }
    else if(t==26){

      AC_17();
    }
    else if(t==27){

      AC_18();
    }
    else if(t==28){

      AC_19();
    }
    else if(t==29){

      AC_20();
    }
    else if(t==30){

      AC_21();
    }
    else if(t==31){

      AC_22();
    }
    else if(t==32){

      AC_23();
    }
    else if(t==33){

      AC_24();
    }
}

void AC_setk4(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){

      AC_16();
    }
    else if(t==24){

      AC_16();
    }
    else if(t==25){

      AC_16();
    }
    else if(t==26){

      AC_16();
    }
    else if(t==27){

      AC_16();
    }
    else if(t==28){

      AC_16();
    }
    else if(t==29){

      AC_17();
    }
    else if(t==30){

      AC_18();
    }
    else if(t==31){

      AC_19();
    }
    else if(t==32){

      AC_20();
    }
    else if(t==33){

      AC_21();
    }
    else if(t==34){

      AC_22();
    }
}

void AC_setk5(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){

      AC_16();
    }
    else if(t==24){

      AC_16();
    }
    else if(t==25){

      AC_16();
    }
    else if(t==26){

      AC_16();
    }
    else if(t==27){

      AC_16();
    }
    else if(t==28){

      AC_16();
    }
    else if(t==29){

      AC_16();
    }
    else if(t==30){

      AC_16();
    }
    else if(t==31){

      AC_16();
    }
    else if(t==32){

      AC_17();
    }
    else if(t==33){

      AC_18();
    }
    else if(t==34){

      AC_19();
    }
    else if(t==35){

      AC_20();
    }
    
}

void AC_setk6(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){

      AC_16();
    }
    else if(t==24){

      AC_16();
    }
    else if(t==25){

      AC_16();
    }
    else if(t==26){

      AC_16();
    }
    else if(t==27){

      AC_16();
    }
    else if(t==28){

      AC_16();
    }
    else if(t==29){

      AC_16();
    }
    else if(t==30){

      AC_16();
    }
    else if(t==31){

      AC_16();
    }
    else if(t==32){

      AC_16();
    }
    else if(t==33){

      AC_16();
    }
    else if(t==34){

      AC_16();
    }
    else if(t==35){

      AC_17();
    }
     else if(t==36){

      AC_18();
    }
    
}

void AC_setk7(){

  if(t==16){

      AC_16();
    }
    if(t==17){

      AC_16();
    }
    else if(t==18){

      AC_16();
    }
    else if(t==19){

      AC_16();
    }
    else if(t==20){

      AC_16();
    }
    else if(t==21){

      AC_16();
    }
    else if(t==22){

      AC_16();
    }
    else if(t==23){

      AC_16();
    }
    else if(t==24){

      AC_16();
    }
    else if(t==25){

      AC_16();
    }
    else if(t==26){

      AC_temp = 16;
      AC_16();
    }
    else if(t==27){

      AC_16();
    }
    else if(t==28){

      AC_16();
    }
    else if(t==29){

      AC_16();
    }
    else if(t==30){

      AC_16();
    }
    else if(t==31){

      AC_16();
    }
    else if(t==32){

      AC_16();
    }
    else if(t==33){

      AC_16();
    }
    else if(t==34){

      AC_16();
    }
    else if(t==35){

      AC_16();
    }
     else if(t==36){

      AC_16();
    }
    else if(t==37){

      AC_16();
    }
    
}

 void AC_sett1(){

  if(t==16){

     AC_18();
    }
    if(t==17){

     AC_19();
     }
    else if(t==18){

      AC_20();
    }
    else if(t==19){

      AC_21();
      
    }
    else if(t==20){

     AC_22();
    }
    else if(t==21){

      AC_23();
    }
    else if(t==22){

      AC_24();
    }
    else if(t==23){
 
      AC_25();
    }
    else if(t==24){

      AC_26();
    }
    else if(t==25){

      AC_27();
    }
    else if(t==26){

      AC_28();
    }
    else if(t==27){

      AC_29();
    }
    else if(t==28){

      AC_30();
    }
    else if(t==29){

      AC_30();
    }
    else if(t==30){

      AC_30();
    }
}

void AC_sett2(){

  if(t==16){

      AC_22();
    }
    if(t==17){

      AC_23();
    }
    else if(t==18){

      AC_24();
    }
    else if(t==19){

      AC_25();
    }
    else if(t==20){

      AC_26();
    }
    else if(t==21){

      AC_27();
    }
    else if(t==22){

     AC_28();
    }
    else if(t==23){

      AC_29();
    }
    else if(t==24){

      AC_30();
    }
    else if(t==25){

      AC_30();
    }
    else if(t==26){

      AC_30();
    }
    else if(t==27){

      AC_30();
    }
    else if(t==28){

      AC_30();
    }
    else if(t==29){

     AC_30();
    }
    else if(t==30){

    AC_30();
    }
}
